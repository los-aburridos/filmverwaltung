// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    window.api_url = 'http://api.themoviedb.org/3';
    window.api_key = 'b8c58e84a6add62d174b2aa7421365be';
    (window.getConfig = function() {
      return $.get("" + api_url + "/configuration?api_key=" + api_key, function(data) {
        return window.base_url = data.images.base_url;
      });
    })();
    window.Movie = (function(_super) {
      __extends(Movie, _super);

      function Movie() {
        _ref = Movie.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Movie.prototype.idAttribute = '_id';

      Movie.prototype.defaults = {
        cast: 'not available',
        genres: 'not available',
        original_title: 'not available',
        overview: 'not available',
        poster_path: 'not available',
        release_date: 'not available',
        runtime: 'not available'
      };

      return Movie;

    })(Backbone.Model);
    window.DecoratedMovie = (function() {
      function DecoratedMovie(movie) {
        this.movie = movie;
        this.movie.set('base_url', window.base_url);
        this.data = {};
        this.deferred = this.fetchDataFromTMDb();
      }

      DecoratedMovie.prototype.toJSON = function() {
        var json;
        json = _.clone(this.movie.attributes);
        if (this.data) {
          return $.extend(json, this.data);
        } else {
          return json;
        }
      };

      DecoratedMovie.prototype.fetchDataFromTMDb = function() {
        var deferred, that, _tmdb_id;
        that = this;
        _tmdb_id = this.movie.get('_tmdb_id');
        if (_tmdb_id) {
          $.get("" + api_url + "/movie/" + _tmdb_id + "?api_key=" + api_key, function(data) {
            $.extend(that.data, data);
            that.data.genres = that.processArray(that.data.genres);
            return that.data.release_date = that.processDate(that.data.release_date);
          });
          return $.get("" + api_url + "/movie/" + _tmdb_id + "/casts?api_key=" + api_key, function(data) {
            $.extend(that.data, data);
            return that.data.cast = that.processArray(that.data.cast.slice(0, 10));
          });
        } else {
          deferred = new $.Deferred;
          return deferred.resolve();
        }
      };

      DecoratedMovie.prototype.processArray = function(array) {
        var rv;
        rv = [];
        _.each(array, function(item) {
          return rv.push(item.name);
        });
        return rv.join(", ");
      };

      DecoratedMovie.prototype.processDate = function(date) {
        var day, month, options, rv, year, _ref1;
        options = {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        };
        _ref1 = date.split('-'), year = _ref1[0], month = _ref1[1], day = _ref1[2];
        rv = new Date(year, month, day);
        return rv.toLocaleDateString('en-US', options);
      };

      return DecoratedMovie;

    })();
    window.Movies = (function(_super) {
      __extends(Movies, _super);

      function Movies() {
        _ref1 = Movies.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Movies.prototype.model = Movie;

      Movies.prototype.url = '/api/movies';

      return Movies;

    })(Backbone.Collection);
    window.movies = new Movies();
    window.MovieView = (function(_super) {
      __extends(MovieView, _super);

      function MovieView() {
        _ref2 = MovieView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      MovieView.prototype.tagName = 'tr';

      MovieView.prototype.events = {
        'click .remove': 'clear'
      };

      MovieView.prototype.initialize = function() {
        this.listenTo(this.model, 'change', this.render);
        this.listenTo(this.model, 'destroy', this.remove);
        return this.template = _.template(($('#movie-view-template')).html());
      };

      MovieView.prototype.render = function() {
        ($(this.el)).html(this.template(this.model.toJSON()));
        return this;
      };

      MovieView.prototype.clear = function() {
        return this.model.destroy();
      };

      return MovieView;

    })(Backbone.View);
    window.MoviesView = (function(_super) {
      __extends(MoviesView, _super);

      function MoviesView() {
        _ref3 = MoviesView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      MoviesView.prototype.tagName = 'div';

      MoviesView.prototype.className = 'row';

      MoviesView.prototype.events = {
        'keypress .submit': 'submit'
      };

      MoviesView.prototype.initialize = function() {
        this.listenTo(this.collection, 'reset', this.render);
        this.listenTo(this.collection, 'change', this.render);
        return this.template = _.template(($('#movies-view-template')).html());
      };

      MoviesView.prototype.render = function() {
        var tbody;
        ($(this.el)).html(this.template({}));
        tbody = this.$('tbody');
        this.collection.each(function(movie) {
          var movieView;
          movieView = new MovieView({
            model: movie
          });
          return tbody.append(movieView.render().el);
        });
        return this;
      };

      MoviesView.prototype.submit = function(e) {
        var all, input, rawDescription, _ref4, _title, _year;
        input = this.$('.submit');
        if (e.which !== 13) {
          return;
        }
        rawDescription = input.val().trim();
        _ref4 = this.parseRawDescription(rawDescription), all = _ref4[0], _title = _ref4[1], _year = _ref4[2];
        this.fetchTMDbId(_year, _title);
        return input.val('');
      };

      MoviesView.prototype.parseRawDescription = function(rawDescription) {
        var pattern, r, result, _i, _len, _results;
        pattern = /([^$]+)(\d{4})/;
        result = rawDescription.match(pattern);
        _results = [];
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          r = result[_i];
          _results.push(r.trim().replace(/,/g, ''));
        }
        return _results;
      };

      MoviesView.prototype.fetchTMDbId = function(_year, _title) {
        var that;
        that = this;
        return $.get("" + api_url + "/search/movie?api_key=" + api_key + "&query=" + _title + "&include_adult=false&year=" + _year, function(data) {
          var _ref4;
          return that.createMovie((_ref4 = data.results[0]) != null ? _ref4.id : void 0, _year, _title);
        });
      };

      MoviesView.prototype.createMovie = function(_tmdb_id, _year, _title) {
        return window.movies.create({
          _tmdb_id: _tmdb_id,
          _year: _year,
          _title: _title
        });
      };

      return MoviesView;

    })(Backbone.View);
    window.MovieSingleView = (function(_super) {
      __extends(MovieSingleView, _super);

      function MovieSingleView() {
        _ref4 = MovieSingleView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      MovieSingleView.prototype.tagName = 'div';

      MovieSingleView.prototype.className = 'row';

      MovieSingleView.prototype.initialize = function() {
        return this.template = _.template(($('#movie-single-view-template')).html());
      };

      MovieSingleView.prototype.render = function() {
        var that;
        that = this;
        this.model.deferred.done(function() {
          return ($(that.el)).html(that.template(that.model.toJSON()));
        });
        return this;
      };

      return MovieSingleView;

    })(Backbone.View);
    window.Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        _ref5 = Router.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      Router.prototype.routes = {
        '': 'index',
        'movies/:id': 'movieSingleView'
      };

      Router.prototype.index = function() {
        var moviesView;
        moviesView = new MoviesView({
          collection: window.movies
        });
        return ($('#container')).empty().append(moviesView.render().el);
      };

      Router.prototype.movieSingleView = function(id) {
        var decoratedMovie, movie, movieSingleView;
        movie = window.movies.get(id);
        decoratedMovie = new DecoratedMovie(movie);
        movieSingleView = new MovieSingleView({
          model: decoratedMovie
        });
        return ($('#container')).empty().append(movieSingleView.render().el);
      };

      return Router;

    })(Backbone.Router);
    return $(function() {
      window.app = new Router();
      Backbone.history.start({
        pushstate: true
      });
      return window.movies.fetch({
        reset: true
      });
    });
  });

}).call(this);
